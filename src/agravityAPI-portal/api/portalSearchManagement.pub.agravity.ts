/**
 * Agravity OpenAPI Documentation - Portal Functions
 * <h1>Agravity API Reference</h1>This is the portal API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Assets management</li> <li>Assets operations</li> <li>Search management</li> <li>General management</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>List / get single  assets</li> <li>Search for assets or collections</li></ul><br/><b>API key is needed to access these endpoints.</b><br/><br/>Copyright Â© Agravity GmbH 2024. All Rights Reserved
 *
 * The version of the OpenAPI document: 6.1.5
 * Contact: office@agravity.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { AgravityErrorResponse } from '../model/models';
import { SearchResult } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { AgravityPortalConfiguration } from '../configuration';

@Injectable({
	providedIn: 'root'
})
export class PortalSearchManagementService {
	protected basePath = 'http://localhost:7073/api';
	public defaultHeaders = new HttpHeaders();
	public configuration = new AgravityPortalConfiguration();
	public encoder: HttpParameterCodec;

	constructor(
		protected httpClient: HttpClient,
		@Optional() @Inject(BASE_PATH) basePath: string,
		@Optional() configuration: AgravityPortalConfiguration
	) {
		if (configuration) {
			this.configuration = configuration;
		}
		if (typeof this.configuration.basePath !== 'string') {
			if (typeof basePath !== 'string') {
				basePath = this.basePath;
			}
			this.configuration.basePath = basePath;
		}
		this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
	}

	private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
		if (typeof value === 'object' && value instanceof Date === false) {
			httpParams = this.addToHttpParamsRecursive(httpParams, value);
		} else {
			httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
		}
		return httpParams;
	}

	private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
		if (value == null) {
			return httpParams;
		}

		if (typeof value === 'object') {
			if (Array.isArray(value)) {
				(value as any[]).forEach((elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
			} else if (value instanceof Date) {
				if (key != null) {
					httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
				} else {
					throw Error('key may not be null if value is Date');
				}
			} else {
				Object.keys(value).forEach((k) => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k)));
			}
		} else if (key != null) {
			httpParams = httpParams.append(key, value);
		} else {
			throw Error('key may not be null if value is not object or array');
		}
		return httpParams;
	}

	/**
	 * This endpoint returns a configured max amount of results for search terms.
	 * @param portalId The ID of the portal for search
	 * @param s The search string which should be found.
	 * @param limit How many results should be returend. 0 is backend configuration limit.
	 * @param skip (default: 0) - Used for paging - how many items should be skipped before next limit results will be fetched.
	 * @param mode Two modes supported: \&quot;any\&quot; or \&quot;all\&quot; search terms should be applied. (Only if Azure Search is enabled)
	 * @param expose This will expose the thumbnail asset blob incl. URL with SAS Token.
	 * @param filter Colon separated key value filter for filterable strings and string collections. For date or numbers \&quot;&lt;\&quot;, \&quot;&#x3D;\&quot; and \&quot;&gt;\&quot; are possible. Mode influences AND (all) and OR (any) of all filters. Multiple filters are separated by semicolons. (Only if Azure Search is enabled)
	 * @param orderby Sortable fields can be used. For descendant sorting use leading \&quot;!\&quot;. (Only if Azure Search is enabled)
	 * @param ids Comma separated values list with all ids which should be returned.
	 * @param translations When default language should be returned and the translation dictionary is delivered. (Ignores the \&quot;Accept-Language\&quot; header)
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPortalSearch(
		portalId: string,
		s: string,
		limit?: number,
		skip?: number,
		mode?: string,
		expose?: boolean,
		filter?: string,
		orderby?: string,
		ids?: string,
		translations?: boolean,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<SearchResult>;
	public httpPortalSearch(
		portalId: string,
		s: string,
		limit?: number,
		skip?: number,
		mode?: string,
		expose?: boolean,
		filter?: string,
		orderby?: string,
		ids?: string,
		translations?: boolean,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<SearchResult>>;
	public httpPortalSearch(
		portalId: string,
		s: string,
		limit?: number,
		skip?: number,
		mode?: string,
		expose?: boolean,
		filter?: string,
		orderby?: string,
		ids?: string,
		translations?: boolean,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<SearchResult>>;
	public httpPortalSearch(
		portalId: string,
		s: string,
		limit?: number,
		skip?: number,
		mode?: string,
		expose?: boolean,
		filter?: string,
		orderby?: string,
		ids?: string,
		translations?: boolean,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		if (portalId === null || portalId === undefined) {
			throw new Error('Required parameter portalId was null or undefined when calling httpPortalSearch.');
		}
		if (s === null || s === undefined) {
			throw new Error('Required parameter s was null or undefined when calling httpPortalSearch.');
		}

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (portalId !== undefined && portalId !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>portalId, 'portal_id');
		}
		if (s !== undefined && s !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>s, 's');
		}
		if (limit !== undefined && limit !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>limit, 'limit');
		}
		if (skip !== undefined && skip !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>skip, 'skip');
		}
		if (mode !== undefined && mode !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>mode, 'mode');
		}
		if (expose !== undefined && expose !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>expose, 'expose');
		}
		if (filter !== undefined && filter !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>filter, 'filter');
		}
		if (orderby !== undefined && orderby !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>orderby, 'orderby');
		}
		if (ids !== undefined && ids !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>ids, 'ids');
		}
		if (translations !== undefined && translations !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>translations, 'translations');
		}

		let headers = this.defaultHeaders;

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<SearchResult>(`${this.configuration.basePath}/search`, {
			params: queryParameters,
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}
}
