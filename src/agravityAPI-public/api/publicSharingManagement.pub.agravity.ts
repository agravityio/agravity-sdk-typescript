/**
 * Agravity OpenAPI Documentation - Public Functions
 *
 * Contact: office@agravity.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { AgravityErrorResponse } from '../model/agravityErrorResponse.pub.agravity';
// @ts-ignore
import { DownloadZipRequest } from '../model/downloadZipRequest.pub.agravity';
// @ts-ignore
import { DownloadZipStatus } from '../model/downloadZipStatus.pub.agravity';
// @ts-ignore
import { QuickShareFull } from '../model/quickShareFull.pub.agravity';
// @ts-ignore
import { SharedCollectionFull } from '../model/sharedCollectionFull.pub.agravity';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { AgravityPublicConfiguration } from '../configuration';
import { BaseService } from '../api.base.service';

export interface HttpQuickShareGetByIdRequestParams {
	/** The ID of the quick share. */
	id: string;
	/** Each result returns the continous token if more results are available than requested. With this token, the next page could be fetched. (URL encoded!) */
	continuationToken?: string;
	/** This number limits the page result of assets. */
	limit?: number;
	/** How the return assets are sorted. Default is property: created_date (newest first). */
	orderby?: string;
}

export interface HttpSharedCollectionsGetByIdRequestParams {
	/** The ID of the shared collection. */
	id: string;
	/** If shared collection has a password, this header is mandatory. Otherwise StatusCode 403 (Forbidden) is returned. */
	ayPassword?: string;
	/** Each result returns the continous token if more results are available than requested. With this token, the next page could be fetched. (URL encoded!) */
	continuationToken?: string;
	/** This number limits the page result of assets. */
	limit?: number;
	/** How the return assets are sorted. Default is property: created_date (newest first). */
	orderby?: string;
	/** The requested language of the response. If not matching it falls back to default language. */
	acceptLanguage?: string;
}

export interface HttpSharedCollectionsGetStatusZipByIdRequestParams {
	/** The ID of the zip request. */
	id: string;
	/** The ID of the requested zip. */
	zipId: string;
	/** If shared collection has a password, this header is mandatory. Otherwise StatusCode 401 (Unauthorized) is returned. */
	ayPassword?: string;
}

export interface HttpSharedCollectionsRequestZipByIdRequestParams {
	/** The ID of the shared collection. */
	id: string;
	/** If shared collection has a password, this header is mandatory. Otherwise StatusCode 403 (Forbidden) is returned. */
	ayPassword?: string;
	/** The request of which assets or download formats should be used.. */
	downloadZipRequest?: DownloadZipRequest;
}

@Injectable({
	providedIn: 'root'
})
export class PublicSharingManagementService extends BaseService {
	constructor(
		protected httpClient: HttpClient,
		@Optional() @Inject(BASE_PATH) basePath: string | string[],
		@Optional() configuration?: AgravityPublicConfiguration
	) {
		super(basePath, configuration);
	}

	/**
	 * Returns one single quick share (from ID)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpQuickShareGetById(
		requestParameters: HttpQuickShareGetByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<QuickShareFull>;
	public httpQuickShareGetById(
		requestParameters: HttpQuickShareGetByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<QuickShareFull>>;
	public httpQuickShareGetById(
		requestParameters: HttpQuickShareGetByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<QuickShareFull>>;
	public httpQuickShareGetById(
		requestParameters: HttpQuickShareGetByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpQuickShareGetById.');
		}
		const continuationToken = requestParameters?.continuationToken;
		const limit = requestParameters?.limit;
		const orderby = requestParameters?.orderby;

		let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>continuationToken, 'continuation_token');
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>orderby, 'orderby');

		let localVarHeaders = this.defaultHeaders;

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/quickshares/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<QuickShareFull>('get', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			params: localVarQueryParameters,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Returns one single shared collection (from ID)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpSharedCollectionsGetById(
		requestParameters: HttpSharedCollectionsGetByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<SharedCollectionFull>;
	public httpSharedCollectionsGetById(
		requestParameters: HttpSharedCollectionsGetByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<SharedCollectionFull>>;
	public httpSharedCollectionsGetById(
		requestParameters: HttpSharedCollectionsGetByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<SharedCollectionFull>>;
	public httpSharedCollectionsGetById(
		requestParameters: HttpSharedCollectionsGetByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpSharedCollectionsGetById.');
		}
		const ayPassword = requestParameters?.ayPassword;
		const continuationToken = requestParameters?.continuationToken;
		const limit = requestParameters?.limit;
		const orderby = requestParameters?.orderby;
		const acceptLanguage = requestParameters?.acceptLanguage;

		let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>continuationToken, 'continuation_token');
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>orderby, 'orderby');

		let localVarHeaders = this.defaultHeaders;
		if (ayPassword !== undefined && ayPassword !== null) {
			localVarHeaders = localVarHeaders.set('ay-password', String(ayPassword));
		}
		if (acceptLanguage !== undefined && acceptLanguage !== null) {
			localVarHeaders = localVarHeaders.set('Accept-Language', String(acceptLanguage));
		}

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/shared/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<SharedCollectionFull>('get', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			params: localVarQueryParameters,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint gets the progress/status of the ZIP creation of a shared collection.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpSharedCollectionsGetStatusZipById(
		requestParameters: HttpSharedCollectionsGetStatusZipByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<DownloadZipStatus>;
	public httpSharedCollectionsGetStatusZipById(
		requestParameters: HttpSharedCollectionsGetStatusZipByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<DownloadZipStatus>>;
	public httpSharedCollectionsGetStatusZipById(
		requestParameters: HttpSharedCollectionsGetStatusZipByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<DownloadZipStatus>>;
	public httpSharedCollectionsGetStatusZipById(
		requestParameters: HttpSharedCollectionsGetStatusZipByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpSharedCollectionsGetStatusZipById.');
		}
		const zipId = requestParameters?.zipId;
		if (zipId === null || zipId === undefined) {
			throw new Error('Required parameter zipId was null or undefined when calling httpSharedCollectionsGetStatusZipById.');
		}
		const ayPassword = requestParameters?.ayPassword;

		let localVarHeaders = this.defaultHeaders;
		if (ayPassword !== undefined && ayPassword !== null) {
			localVarHeaders = localVarHeaders.set('ay-password', String(ayPassword));
		}

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/shared/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/zip/${this.configuration.encodeParam({ name: 'zipId', value: zipId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<DownloadZipStatus>('get', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Initiates the ZIP creation of a shared collection.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpSharedCollectionsRequestZipById(
		requestParameters: HttpSharedCollectionsRequestZipByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<DownloadZipRequest>;
	public httpSharedCollectionsRequestZipById(
		requestParameters: HttpSharedCollectionsRequestZipByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<DownloadZipRequest>>;
	public httpSharedCollectionsRequestZipById(
		requestParameters: HttpSharedCollectionsRequestZipByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<DownloadZipRequest>>;
	public httpSharedCollectionsRequestZipById(
		requestParameters: HttpSharedCollectionsRequestZipByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpSharedCollectionsRequestZipById.');
		}
		const ayPassword = requestParameters?.ayPassword;
		const downloadZipRequest = requestParameters?.downloadZipRequest;

		let localVarHeaders = this.defaultHeaders;
		if (ayPassword !== undefined && ayPassword !== null) {
			localVarHeaders = localVarHeaders.set('ay-password', String(ayPassword));
		}

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/shared/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/zip`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<DownloadZipRequest>('post', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			body: downloadZipRequest,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}
}
