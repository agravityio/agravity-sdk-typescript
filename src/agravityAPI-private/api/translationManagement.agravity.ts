/**
 * Agravity OpenAPI Documentation - Private Functions
 *
 * Contact: office@agravity.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec, HttpContext } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { AgravityErrorResponse } from '../model/agravityErrorResponse.agravity';
// @ts-ignore
import { EntityTranslations } from '../model/entityTranslations.agravity';
// @ts-ignore
import { Translation } from '../model/translation.agravity';
// @ts-ignore
import { TranslationRequest } from '../model/translationRequest.agravity';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { AgravityConfiguration } from '../configuration';
import { BaseService } from '../api.base.service';

export interface HttpBulkTranslationsRequestParams {
	/** A list of entity IDs (can be assets, collections, collection types, download formats, etc. */
	requestBody: Array<string>;
	/** If given the only translations of this property are returned. */
	property?: string;
}

export interface HttpCognitiveTranslateTextRequestParams {
	/** This endpoint creates translations for the provided text */
	translationRequest: TranslationRequest;
}

export interface HttpTranslationsByIdRequestParams {
	/** The ID of any translateable entity (Asset, Collection, Collection Type, Download Format). */
	id: string;
	/** If the items should be included (only for entity type Collection and Asset). */
	items?: boolean;
}

export interface HttpTranslationsByIdFilterByCustomFieldRequestParams {
	/** The ID of only translateable entities with custom fields (Asset, Collection). */
	id: string;
	/** Limit the output to a specific custom field key. */
	customField: string;
}

export interface HttpTranslationsByIdFilterByPropertyRequestParams {
	/** The ID of any translateable entity (Asset, Collection, Collection Type, Download Format). */
	id: string;
	/** Limit to one specific property (key) */
	property: string;
	/** If the items should be included (only for entity type Collection and Asset). */
	items?: boolean;
}

export interface HttpUpdateTranslationsByIdRequestParams {
	/** The ID of any translateable entity (Asset, Collection, Collection Type, Download Format). */
	id: string;
	/** The body has to contain the dictionary of the dictionaries with all translations. Not fitting properties are ignored. */
	requestBody: { [key: string]: { [key: string]: object } };
}

@Injectable({
	providedIn: 'root'
})
export class TranslationManagementService extends BaseService {
	constructor(
		protected httpClient: HttpClient,
		@Optional() @Inject(BASE_PATH) basePath: string | string[],
		@Optional() configuration?: AgravityConfiguration
	) {
		super(basePath, configuration);
	}

	/**
	 * Get all the translations of a whole list of translatable entities.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpBulkTranslations(
		requestParameters: HttpBulkTranslationsRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<Array<EntityTranslations>>;
	public httpBulkTranslations(
		requestParameters: HttpBulkTranslationsRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<Array<EntityTranslations>>>;
	public httpBulkTranslations(
		requestParameters: HttpBulkTranslationsRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<Array<EntityTranslations>>>;
	public httpBulkTranslations(
		requestParameters: HttpBulkTranslationsRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const requestBody = requestParameters?.requestBody;
		if (requestBody === null || requestBody === undefined) {
			throw new Error('Required parameter requestBody was null or undefined when calling httpBulkTranslations.');
		}
		const property = requestParameters?.property;

		let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>property, 'property');

		let localVarHeaders = this.defaultHeaders;

		// authentication (msal_auth) required
		localVarHeaders = this.configuration.addCredentialToHeaders('msal_auth', 'Authorization', localVarHeaders, 'Bearer ');

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/translations`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<Array<EntityTranslations>>('post', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			body: requestBody,
			params: localVarQueryParameters,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Translates the given text into the requested languages by the Microsoft AI Translator. (only when enabled in settings)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpCognitiveTranslateText(
		requestParameters: HttpCognitiveTranslateTextRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<Array<Translation>>;
	public httpCognitiveTranslateText(
		requestParameters: HttpCognitiveTranslateTextRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<Array<Translation>>>;
	public httpCognitiveTranslateText(
		requestParameters: HttpCognitiveTranslateTextRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<Array<Translation>>>;
	public httpCognitiveTranslateText(
		requestParameters: HttpCognitiveTranslateTextRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const translationRequest = requestParameters?.translationRequest;
		if (translationRequest === null || translationRequest === undefined) {
			throw new Error('Required parameter translationRequest was null or undefined when calling httpCognitiveTranslateText.');
		}

		let localVarHeaders = this.defaultHeaders;

		// authentication (msal_auth) required
		localVarHeaders = this.configuration.addCredentialToHeaders('msal_auth', 'Authorization', localVarHeaders, 'Bearer ');

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/translations-ai`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<Array<Translation>>('post', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			body: translationRequest,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Get all the translations of a whole entity (Asset, Collection, Collection Type, Download Format)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpTranslationsById(
		requestParameters: HttpTranslationsByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<{ [key: string]: { [key: string]: object } }>;
	public httpTranslationsById(
		requestParameters: HttpTranslationsByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<{ [key: string]: { [key: string]: object } }>>;
	public httpTranslationsById(
		requestParameters: HttpTranslationsByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<{ [key: string]: { [key: string]: object } }>>;
	public httpTranslationsById(
		requestParameters: HttpTranslationsByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpTranslationsById.');
		}
		const items = requestParameters?.items;

		let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>items, 'items');

		let localVarHeaders = this.defaultHeaders;

		// authentication (msal_auth) required
		localVarHeaders = this.configuration.addCredentialToHeaders('msal_auth', 'Authorization', localVarHeaders, 'Bearer ');

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/translations/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<{ [key: string]: { [key: string]: object } }>('get', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			params: localVarQueryParameters,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Get the translation of custom field on the entity (Asset, Collection)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpTranslationsByIdFilterByCustomField(
		requestParameters: HttpTranslationsByIdFilterByCustomFieldRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<{ [key: string]: { [key: string]: object } }>;
	public httpTranslationsByIdFilterByCustomField(
		requestParameters: HttpTranslationsByIdFilterByCustomFieldRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<{ [key: string]: { [key: string]: object } }>>;
	public httpTranslationsByIdFilterByCustomField(
		requestParameters: HttpTranslationsByIdFilterByCustomFieldRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<{ [key: string]: { [key: string]: object } }>>;
	public httpTranslationsByIdFilterByCustomField(
		requestParameters: HttpTranslationsByIdFilterByCustomFieldRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpTranslationsByIdFilterByCustomField.');
		}
		const customField = requestParameters?.customField;
		if (customField === null || customField === undefined) {
			throw new Error('Required parameter customField was null or undefined when calling httpTranslationsByIdFilterByCustomField.');
		}

		let localVarHeaders = this.defaultHeaders;

		// authentication (msal_auth) required
		localVarHeaders = this.configuration.addCredentialToHeaders('msal_auth', 'Authorization', localVarHeaders, 'Bearer ');

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/translations/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/custom/${this.configuration.encodeParam({ name: 'customField', value: customField, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<{ [key: string]: { [key: string]: object } }>('get', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Get the translations of a specific field on the entity (Asset, Collection, Collection Type, Download Format)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpTranslationsByIdFilterByProperty(
		requestParameters: HttpTranslationsByIdFilterByPropertyRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<{ [key: string]: { [key: string]: object } }>;
	public httpTranslationsByIdFilterByProperty(
		requestParameters: HttpTranslationsByIdFilterByPropertyRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<{ [key: string]: { [key: string]: object } }>>;
	public httpTranslationsByIdFilterByProperty(
		requestParameters: HttpTranslationsByIdFilterByPropertyRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<{ [key: string]: { [key: string]: object } }>>;
	public httpTranslationsByIdFilterByProperty(
		requestParameters: HttpTranslationsByIdFilterByPropertyRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpTranslationsByIdFilterByProperty.');
		}
		const property = requestParameters?.property;
		if (property === null || property === undefined) {
			throw new Error('Required parameter property was null or undefined when calling httpTranslationsByIdFilterByProperty.');
		}
		const items = requestParameters?.items;

		let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
		localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>items, 'items');

		let localVarHeaders = this.defaultHeaders;

		// authentication (msal_auth) required
		localVarHeaders = this.configuration.addCredentialToHeaders('msal_auth', 'Authorization', localVarHeaders, 'Bearer ');

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/translations/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'property', value: property, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<{ [key: string]: { [key: string]: object } }>('get', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			params: localVarQueryParameters,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}

	/**
	 * Updates the translations of a whole entity (Asset, Collection, Collection Type, Download Format)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpUpdateTranslationsById(
		requestParameters: HttpUpdateTranslationsByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<{ [key: string]: { [key: string]: object } }>;
	public httpUpdateTranslationsById(
		requestParameters: HttpUpdateTranslationsByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpResponse<{ [key: string]: { [key: string]: object } }>>;
	public httpUpdateTranslationsById(
		requestParameters: HttpUpdateTranslationsByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<HttpEvent<{ [key: string]: { [key: string]: object } }>>;
	public httpUpdateTranslationsById(
		requestParameters: HttpUpdateTranslationsByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext; transferCache?: boolean }
	): Observable<any> {
		const id = requestParameters?.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpUpdateTranslationsById.');
		}
		const requestBody = requestParameters?.requestBody;
		if (requestBody === null || requestBody === undefined) {
			throw new Error('Required parameter requestBody was null or undefined when calling httpUpdateTranslationsById.');
		}

		let localVarHeaders = this.defaultHeaders;

		// authentication (msal_auth) required
		localVarHeaders = this.configuration.addCredentialToHeaders('msal_auth', 'Authorization', localVarHeaders, 'Bearer ');

		const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);
		if (localVarHttpHeaderAcceptSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
		}

		const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

		const localVarTransferCache: boolean = options?.transferCache ?? true;

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' | 'blob' = 'json';
		if (localVarHttpHeaderAcceptSelected) {
			if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
				responseType_ = 'text';
			} else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
				responseType_ = 'json';
			} else {
				responseType_ = 'blob';
			}
		}

		let localVarPath = `/translations/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
		const { basePath, withCredentials } = this.configuration;
		return this.httpClient.request<{ [key: string]: { [key: string]: object } }>('post', `${basePath}${localVarPath}`, {
			context: localVarHttpContext,
			body: requestBody,
			responseType: <any>responseType_,
			...(withCredentials ? { withCredentials } : {}),
			headers: localVarHeaders,
			observe: observe,
			transferCache: localVarTransferCache,
			reportProgress: reportProgress
		});
	}
}
