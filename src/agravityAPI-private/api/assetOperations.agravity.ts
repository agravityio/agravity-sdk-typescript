/**
 * Agravity OpenAPI Documentation - Private Functions
 * <h1>Agravity API Reference</h1>This is the full API description of Agravity GmbH.<br/><h2>Resources</h2><ul> <li>Collection type management</li> <li>Collections management</li> <li>Assets management</li> <li>Assets operations</li> <li>Assets publishing</li> <li>Assets versioning</li> <li>Sharing collection</li> <li>Secure upload to collection</li> <li>Download ZIP</li> <li>Search</li> <li>General management</li> <li>Authentication management</li> <li>Blob management</li> <li>Queue management</li> <li>Structure management</li> <li>Bulk get all data from collection / collection type</li></ul><h2> Operations</h2>Agravity API performs the following operations:<ul> <li>Create / update / list / delete collection types</li> <li>Create / update / list / delete collections</li> <li>Create / update / list / delete assets</li> <li>Operations on assets like: move to collection, renew asset(through queue pipe), rotate, resize, etc.</li> <li>Publish / de-publish an asset or specific variants of an asset</li> <li>Create / delete version of asset</li> <li>Bulk download of Assets</li> <li>Search for assets or collections</li> <li>Authenticated access like e.g. getting access to blobs directly (for upload on folder or generate SAS token)</li> <li>List / delete blobs</li> <li>Create structures based on blob storage input</li></ul><br/>Copyright Â© Agravity GmbH 2024. All Rights Reserved
 *
 * The version of the OpenAPI document: 7.3.1
 * Contact: office@agravity.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { AgravityErrorResponse } from '../model/models';
import { AgravityInfoResponse } from '../model/models';
import { Asset } from '../model/models';
import { AssetAvailability } from '../model/models';
import { AssetBlob } from '../model/models';
import { AssetTextContent } from '../model/models';
import { AssetsOperationBody } from '../model/models';
import { Collection } from '../model/models';
import { DynamicImageOperation } from '../model/models';
import { Metadata } from '../model/models';
import { MoveCollectionBody } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { AgravityConfiguration } from '../configuration';

export interface HttpAssetImageEditRequestParams {
	/** The ID of the asset. */
	id: string;
	/** The width of the final image. */
	width?: number;
	/** The height of the final image. */
	height?: number;
	/** The supported modes: contain (default), cover, fill, crop, none */
	mode?: string;
	/** The file type which the image should be (i.e. webp, png, jpg, gif) */
	target?: string;
	/** The color of the background color if background is visible (crop outside, png). RGB(A) in hex code (i.e. 00FFAA or with alpha channel: 44AABB77) and color names (i.e. lightgray) supported - default: transparent */
	bgcolor?: string;
	/** The density (counts for X and Y) of the target image. */
	dpi?: number;
	/** The bit depth of the target image. */
	depth?: number;
	/** The quality of the target image (1-100). */
	quality?: number;
	/** The color space of the image (Default: sRGB). */
	colorspace?: string;
	/** If mode is crop: The x coordinate of the point (if image is extended (outside) it is negative) */
	cropX?: number;
	/** If mode is crop: The y coordinate of the point (if image is extended (outside) it is negative) */
	cropY?: number;
	/** If mode&#x3D;crop: The width of the cropping rectangle (from original pixel) */
	cropWidth?: number;
	/** If mode&#x3D;crop: The height of the cropping rectangle (from original pixel) */
	cropHeight?: number;
	/** Which filter should be applied. To get all filters available use: /api/helper/imageeditfilters */
	filter?: string;
	/** If set to true the internal image is used instead of the default original */
	original?: boolean;
}

export interface HttpAssetImageRotateClockwiseRequestParams {
	/** The ID of the asset. */
	id: string;
	/** When default language should be returned and the translation dictionary is delivered. (Ignores the \&quot;Accept-Language\&quot; header) */
	translations?: boolean;
	/** The requested language of the response. If not matching it falls back to default language. */
	acceptLanguage?: string;
}

export interface HttpAssetResizeRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpAssetToCollectionRequestParams {
	/** The ID of the asset. */
	id: string;
	/** Contains information about this operation. */
	moveCollectionBody: MoveCollectionBody;
}

export interface HttpAssetsToCollectionRequestParams {
	/** Contains information which assets should be assigned to collection. */
	assetsOperationBody: AssetsOperationBody;
}

export interface HttpDeleteAlternativeThumbRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpDeleteSpecificBlobRequestParams {
	/** The ID of the asset. */
	id: string;
	/** The name of the container where this blob is. */
	name: string;
}

export interface HttpGetAllAssetsCheckOnCriteriaRequestParams {
	/** Give the plain md5 string as parameter to be checked on all assets. */
	md5: string;
}

export interface HttpGetAssetBlobRequestParams {
	/** The ID of the asset. */
	id: string;
	/** \&quot;t\&quot; for thumbnail (default); \&quot;op\&quot; for optimized; \&quot;os\&quot; for original size; \&quot;o\&quot; for original. */
	c?: string;
}

export interface HttpGetAssetCollectionsByIdRequestParams {
	/** The ID of the asset. */
	id: string;
	/** This limits the fields which are returned, separated by comma (\&#39;,\&#39;). */
	fields?: string;
	/** When default language should be returned and the translation dictionary is delivered. (Ignores the \&quot;Accept-Language\&quot; header) */
	translations?: boolean;
	/** The requested language of the response. If not matching it falls back to default language. */
	acceptLanguage?: string;
}

export interface HttpGetAssetDownloadRequestParams {
	/** The ID of the asset. */
	id: string;
	/** \&quot;t\&quot; for thumbnail (default); \&quot;op\&quot; for optimized; \&quot;os\&quot; for original size; \&quot;o\&quot; for original. */
	c?: string;
	/** (optional) provide the id of any valid download format. */
	f?: string;
	/** If the request comes from portal this is the indicator. It will be checked if the requested blob is valid for the portal. */
	portalId?: string;
}

export interface HttpGetAssetTechDataByIdRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpGetAssetTextContentByIdRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpImageDynamicEditRequestParams {
	/** The ID of the asset. */
	id: string;
	/** Operations to be performed on the image directly mapped to c# imagemagick sdk */
	dynamicImageOperation: Array<DynamicImageOperation>;
}

export interface HttpImageDynamicGetFromDownloadIdRequestParams {
	/** The ID of the asset. */
	id: string;
	/** The ID of the download format. */
	downloadFormatId: string;
}

export interface HttpPatchAssetPurgeCdnRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpPatchAssetReindexRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpPatchAssetRenewRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpPatchAssetRepairRequestParams {
	/** The ID of the asset. */
	id: string;
}

export interface HttpPatchAssetRunQueueRequestParams {
	/** The ID of the asset. */
	id: string;
	/** The name of the queue(s) which should be executed. (Comma separated) */
	queueInput: string;
}

export interface HttpPutAssetAvailabilityRequestParams {
	/** The ID of the asset. */
	id: string;
	/** The values are validated and put directly on the asset. */
	assetAvailability: AssetAvailability;
}

@Injectable({
	providedIn: 'root'
})
export class AssetOperationsService {
	protected basePath = 'http://localhost:7071/api';
	public defaultHeaders = new HttpHeaders();
	public configuration = new AgravityConfiguration();
	public encoder: HttpParameterCodec;

	constructor(
		protected httpClient: HttpClient,
		@Optional() @Inject(BASE_PATH) basePath: string,
		@Optional() configuration: AgravityConfiguration
	) {
		if (configuration) {
			this.configuration = configuration;
		}
		if (typeof this.configuration.basePath !== 'string') {
			if (typeof basePath !== 'string') {
				basePath = this.basePath;
			}
			this.configuration.basePath = basePath;
		}
		this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
	}

	private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
		if (typeof value === 'object' && value instanceof Date === false) {
			httpParams = this.addToHttpParamsRecursive(httpParams, value);
		} else {
			httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
		}
		return httpParams;
	}

	private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
		if (value == null) {
			return httpParams;
		}

		if (typeof value === 'object') {
			if (Array.isArray(value)) {
				(value as any[]).forEach((elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));
			} else if (value instanceof Date) {
				if (key != null) {
					httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
				} else {
					throw Error('key may not be null if value is Date');
				}
			} else {
				Object.keys(value).forEach((k) => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k)));
			}
		} else if (key != null) {
			httpParams = httpParams.append(key, value);
		} else {
			throw Error('key may not be null if value is not object or array');
		}
		return httpParams;
	}

	/**
	 * This endpoint lets you resize/modify the image asset according to the given parameter(s).
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpAssetImageEdit(
		requestParameters: HttpAssetImageEditRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<Blob>;
	public httpAssetImageEdit(
		requestParameters: HttpAssetImageEditRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpResponse<Blob>>;
	public httpAssetImageEdit(
		requestParameters: HttpAssetImageEditRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpEvent<Blob>>;
	public httpAssetImageEdit(
		requestParameters: HttpAssetImageEditRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpAssetImageEdit.');
		}
		const width = requestParameters.width;
		const height = requestParameters.height;
		const mode = requestParameters.mode;
		const target = requestParameters.target;
		const bgcolor = requestParameters.bgcolor;
		const dpi = requestParameters.dpi;
		const depth = requestParameters.depth;
		const quality = requestParameters.quality;
		const colorspace = requestParameters.colorspace;
		const cropX = requestParameters.cropX;
		const cropY = requestParameters.cropY;
		const cropWidth = requestParameters.cropWidth;
		const cropHeight = requestParameters.cropHeight;
		const filter = requestParameters.filter;
		const original = requestParameters.original;

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (width !== undefined && width !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>width, 'width');
		}
		if (height !== undefined && height !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>height, 'height');
		}
		if (mode !== undefined && mode !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>mode, 'mode');
		}
		if (target !== undefined && target !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>target, 'target');
		}
		if (bgcolor !== undefined && bgcolor !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>bgcolor, 'bgcolor');
		}
		if (dpi !== undefined && dpi !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>dpi, 'dpi');
		}
		if (depth !== undefined && depth !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>depth, 'depth');
		}
		if (quality !== undefined && quality !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>quality, 'quality');
		}
		if (colorspace !== undefined && colorspace !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>colorspace, 'colorspace');
		}
		if (cropX !== undefined && cropX !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>cropX, 'crop_x');
		}
		if (cropY !== undefined && cropY !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>cropY, 'crop_y');
		}
		if (cropWidth !== undefined && cropWidth !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>cropWidth, 'crop_width');
		}
		if (cropHeight !== undefined && cropHeight !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>cropHeight, 'crop_height');
		}
		if (filter !== undefined && filter !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>filter, 'filter');
		}
		if (original !== undefined && original !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>original, 'original');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['image/xyz', 'application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		return this.httpClient.get(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/imageedit`, {
			params: queryParameters,
			responseType: 'blob',
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint lets you rotate an image clockwise in 90 degree steps.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpAssetImageRotateClockwise(
		requestParameters: HttpAssetImageRotateClockwiseRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<Asset>;
	public httpAssetImageRotateClockwise(
		requestParameters: HttpAssetImageRotateClockwiseRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<Asset>>;
	public httpAssetImageRotateClockwise(
		requestParameters: HttpAssetImageRotateClockwiseRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<Asset>>;
	public httpAssetImageRotateClockwise(
		requestParameters: HttpAssetImageRotateClockwiseRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpAssetImageRotateClockwise.');
		}
		const translations = requestParameters.translations;
		const acceptLanguage = requestParameters.acceptLanguage;

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (translations !== undefined && translations !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>translations, 'translations');
		}

		let headers = this.defaultHeaders;
		if (acceptLanguage !== undefined && acceptLanguage !== null) {
			headers = headers.set('Accept-Language', String(acceptLanguage));
		}

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.post<Asset>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/rotate`, null, {
			params: queryParameters,
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint lets you resize/modify the image asset according to the given parameter(s).
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpAssetResize(
		requestParameters: HttpAssetResizeRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<Blob>;
	public httpAssetResize(
		requestParameters: HttpAssetResizeRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpResponse<Blob>>;
	public httpAssetResize(
		requestParameters: HttpAssetResizeRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpEvent<Blob>>;
	public httpAssetResize(
		requestParameters: HttpAssetResizeRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpAssetResize.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['image/xyz', 'application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		return this.httpClient.get(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/resize`, {
			responseType: 'blob',
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint allows to move/assign from/to another collection with the given operation parameter.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpAssetToCollection(
		requestParameters: HttpAssetToCollectionRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any>;
	public httpAssetToCollection(
		requestParameters: HttpAssetToCollectionRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<any>>;
	public httpAssetToCollection(
		requestParameters: HttpAssetToCollectionRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<any>>;
	public httpAssetToCollection(
		requestParameters: HttpAssetToCollectionRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpAssetToCollection.');
		}
		const moveCollectionBody = requestParameters.moveCollectionBody;
		if (moveCollectionBody === null || moveCollectionBody === undefined) {
			throw new Error('Required parameter moveCollectionBody was null or undefined when calling httpAssetToCollection.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			headers = headers.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.post<any>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/tocollection`, moveCollectionBody, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint allows to move/assign multiple assets from/to another collection with the given operation parameter.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpAssetsToCollection(
		requestParameters: HttpAssetsToCollectionRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any>;
	public httpAssetsToCollection(
		requestParameters: HttpAssetsToCollectionRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<any>>;
	public httpAssetsToCollection(
		requestParameters: HttpAssetsToCollectionRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<any>>;
	public httpAssetsToCollection(
		requestParameters: HttpAssetsToCollectionRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const assetsOperationBody = requestParameters.assetsOperationBody;
		if (assetsOperationBody === null || assetsOperationBody === undefined) {
			throw new Error('Required parameter assetsOperationBody was null or undefined when calling httpAssetsToCollection.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			headers = headers.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.post<any>(`${this.configuration.basePath}/assetsoperations/tocollection`, assetsOperationBody, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint deletes the alternative thumbnail blob of an asset and renews it
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpDeleteAlternativeThumb(
		requestParameters: HttpDeleteAlternativeThumbRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpDeleteAlternativeThumb(
		requestParameters: HttpDeleteAlternativeThumbRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpDeleteAlternativeThumb(
		requestParameters: HttpDeleteAlternativeThumbRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpDeleteAlternativeThumb(
		requestParameters: HttpDeleteAlternativeThumbRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpDeleteAlternativeThumb.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.delete<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/alternative`, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 *  This endpoint deletes a specific blob from the asset (if exists)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpDeleteSpecificBlob(
		requestParameters: HttpDeleteSpecificBlobRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpDeleteSpecificBlob(
		requestParameters: HttpDeleteSpecificBlobRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpDeleteSpecificBlob(
		requestParameters: HttpDeleteSpecificBlobRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpDeleteSpecificBlob(
		requestParameters: HttpDeleteSpecificBlobRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpDeleteSpecificBlob.');
		}
		const name = requestParameters.name;
		if (name === null || name === undefined) {
			throw new Error('Required parameter name was null or undefined when calling httpDeleteSpecificBlob.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.delete<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/blobs/${encodeURIComponent(String(name))}`, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint allows to check all assets in system elements with the given criteria are already in the system. Currently supported field: md5
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpGetAllAssetsCheckOnCriteria(
		requestParameters: HttpGetAllAssetsCheckOnCriteriaRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<Array<Asset>>;
	public httpGetAllAssetsCheckOnCriteria(
		requestParameters: HttpGetAllAssetsCheckOnCriteriaRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<Array<Asset>>>;
	public httpGetAllAssetsCheckOnCriteria(
		requestParameters: HttpGetAllAssetsCheckOnCriteriaRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<Array<Asset>>>;
	public httpGetAllAssetsCheckOnCriteria(
		requestParameters: HttpGetAllAssetsCheckOnCriteriaRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const md5 = requestParameters.md5;
		if (md5 === null || md5 === undefined) {
			throw new Error('Required parameter md5 was null or undefined when calling httpGetAllAssetsCheckOnCriteria.');
		}

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (md5 !== undefined && md5 !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>md5, 'md5');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<Array<Asset>>(`${this.configuration.basePath}/assetscheck`, {
			params: queryParameters,
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint checks, if an asset exists and returns the url for the requested blob.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpGetAssetBlob(requestParameters: HttpGetAssetBlobRequestParams, observe?: 'body', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<AssetBlob>;
	public httpGetAssetBlob(
		requestParameters: HttpGetAssetBlobRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AssetBlob>>;
	public httpGetAssetBlob(
		requestParameters: HttpGetAssetBlobRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AssetBlob>>;
	public httpGetAssetBlob(
		requestParameters: HttpGetAssetBlobRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpGetAssetBlob.');
		}
		const c = requestParameters.c;

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (c !== undefined && c !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>c, 'c');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<AssetBlob>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/blobs`, {
			params: queryParameters,
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint returns all collections of a specific asset.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpGetAssetCollectionsById(
		requestParameters: HttpGetAssetCollectionsByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<Array<Collection>>;
	public httpGetAssetCollectionsById(
		requestParameters: HttpGetAssetCollectionsByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<Array<Collection>>>;
	public httpGetAssetCollectionsById(
		requestParameters: HttpGetAssetCollectionsByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<Array<Collection>>>;
	public httpGetAssetCollectionsById(
		requestParameters: HttpGetAssetCollectionsByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpGetAssetCollectionsById.');
		}
		const fields = requestParameters.fields;
		const translations = requestParameters.translations;
		const acceptLanguage = requestParameters.acceptLanguage;

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (fields !== undefined && fields !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>fields, 'fields');
		}
		if (translations !== undefined && translations !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>translations, 'translations');
		}

		let headers = this.defaultHeaders;
		if (acceptLanguage !== undefined && acceptLanguage !== null) {
			headers = headers.set('Accept-Language', String(acceptLanguage));
		}

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<Array<Collection>>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/collections`, {
			params: queryParameters,
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint is similar to GetAssetBlob but with ContentDistribution and filename to let browser download the content.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpGetAssetDownload(
		requestParameters: HttpGetAssetDownloadRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AssetBlob>;
	public httpGetAssetDownload(
		requestParameters: HttpGetAssetDownloadRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AssetBlob>>;
	public httpGetAssetDownload(
		requestParameters: HttpGetAssetDownloadRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AssetBlob>>;
	public httpGetAssetDownload(
		requestParameters: HttpGetAssetDownloadRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpGetAssetDownload.');
		}
		const c = requestParameters.c;
		const f = requestParameters.f;
		const portalId = requestParameters.portalId;

		let queryParameters = new HttpParams({ encoder: this.encoder });
		if (c !== undefined && c !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>c, 'c');
		}
		if (f !== undefined && f !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>f, 'f');
		}
		if (portalId !== undefined && portalId !== null) {
			queryParameters = this.addToHttpParams(queryParameters, <any>portalId, 'portal_id');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<AssetBlob>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/download`, {
			params: queryParameters,
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint returns all technical metadata of an asset.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpGetAssetTechDataById(
		requestParameters: HttpGetAssetTechDataByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<Array<Metadata>>;
	public httpGetAssetTechDataById(
		requestParameters: HttpGetAssetTechDataByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<Array<Metadata>>>;
	public httpGetAssetTechDataById(
		requestParameters: HttpGetAssetTechDataByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<Array<Metadata>>>;
	public httpGetAssetTechDataById(
		requestParameters: HttpGetAssetTechDataByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpGetAssetTechDataById.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<Array<Metadata>>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/techdata`, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint returns all textual content of an asset (i.e. text of PDF)
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpGetAssetTextContentById(
		requestParameters: HttpGetAssetTextContentByIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AssetTextContent>;
	public httpGetAssetTextContentById(
		requestParameters: HttpGetAssetTextContentByIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AssetTextContent>>;
	public httpGetAssetTextContentById(
		requestParameters: HttpGetAssetTextContentByIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AssetTextContent>>;
	public httpGetAssetTextContentById(
		requestParameters: HttpGetAssetTextContentByIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpGetAssetTextContentById.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.get<AssetTextContent>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/textcontent`, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint lets you use the entire api of Imagemagick to edit the image.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpImageDynamicEdit(
		requestParameters: HttpImageDynamicEditRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<Blob>;
	public httpImageDynamicEdit(
		requestParameters: HttpImageDynamicEditRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpResponse<Blob>>;
	public httpImageDynamicEdit(
		requestParameters: HttpImageDynamicEditRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpEvent<Blob>>;
	public httpImageDynamicEdit(
		requestParameters: HttpImageDynamicEditRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpImageDynamicEdit.');
		}
		const dynamicImageOperation = requestParameters.dynamicImageOperation;
		if (dynamicImageOperation === null || dynamicImageOperation === undefined) {
			throw new Error('Required parameter dynamicImageOperation was null or undefined when calling httpImageDynamicEdit.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['image/xyz', 'application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			headers = headers.set('Content-Type', httpContentTypeSelected);
		}

		return this.httpClient.post(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/imageedit`, dynamicImageOperation, {
			responseType: 'blob',
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint returns an image with the requested download format applied.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpImageDynamicGetFromDownloadId(
		requestParameters: HttpImageDynamicGetFromDownloadIdRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<Blob>;
	public httpImageDynamicGetFromDownloadId(
		requestParameters: HttpImageDynamicGetFromDownloadIdRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpResponse<Blob>>;
	public httpImageDynamicGetFromDownloadId(
		requestParameters: HttpImageDynamicGetFromDownloadIdRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<HttpEvent<Blob>>;
	public httpImageDynamicGetFromDownloadId(
		requestParameters: HttpImageDynamicGetFromDownloadIdRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'image/xyz' | 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpImageDynamicGetFromDownloadId.');
		}
		const downloadFormatId = requestParameters.downloadFormatId;
		if (downloadFormatId === null || downloadFormatId === undefined) {
			throw new Error('Required parameter downloadFormatId was null or undefined when calling httpImageDynamicGetFromDownloadId.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['image/xyz', 'application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		return this.httpClient.get(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/imageedit/${encodeURIComponent(String(downloadFormatId))}`, {
			responseType: 'blob',
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint purges all published assets of this asset when CDN is enabled
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPatchAssetPurgeCdn(
		requestParameters: HttpPatchAssetPurgeCdnRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpPatchAssetPurgeCdn(
		requestParameters: HttpPatchAssetPurgeCdnRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpPatchAssetPurgeCdn(
		requestParameters: HttpPatchAssetPurgeCdnRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpPatchAssetPurgeCdn(
		requestParameters: HttpPatchAssetPurgeCdnRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpPatchAssetPurgeCdn.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.patch<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/purgecdn`, null, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint marks a asset as \&quot;dirty\&quot; (starts a queue to do that) - to trigger search index to re-index the asset
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPatchAssetReindex(
		requestParameters: HttpPatchAssetReindexRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpPatchAssetReindex(
		requestParameters: HttpPatchAssetReindexRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpPatchAssetReindex(
		requestParameters: HttpPatchAssetReindexRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpPatchAssetReindex(
		requestParameters: HttpPatchAssetReindexRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpPatchAssetReindex.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.patch<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/reindex`, null, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint runs all configured queues of the asset again (requeue ID at beginning of queues). E.g. Recreation of previews, AI recognition, hash values, ...
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPatchAssetRenew(
		requestParameters: HttpPatchAssetRenewRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpPatchAssetRenew(
		requestParameters: HttpPatchAssetRenewRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpPatchAssetRenew(
		requestParameters: HttpPatchAssetRenewRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpPatchAssetRenew(
		requestParameters: HttpPatchAssetRenewRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpPatchAssetRenew.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.patch<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/renew`, null, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint repairs the asset, it\&#39;s items, custom fields and collections. It also checks the original blob and the blobs of the asset.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPatchAssetRepair(
		requestParameters: HttpPatchAssetRepairRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpPatchAssetRepair(
		requestParameters: HttpPatchAssetRepairRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpPatchAssetRepair(
		requestParameters: HttpPatchAssetRepairRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpPatchAssetRepair(
		requestParameters: HttpPatchAssetRepairRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpPatchAssetRepair.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.patch<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/repair`, null, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint execute a specific queues of the asset. E.g. Recreation of previews, AI recognition, hash values, ...
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPatchAssetRunQueue(
		requestParameters: HttpPatchAssetRunQueueRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AgravityInfoResponse>;
	public httpPatchAssetRunQueue(
		requestParameters: HttpPatchAssetRunQueueRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpPatchAssetRunQueue(
		requestParameters: HttpPatchAssetRunQueueRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpPatchAssetRunQueue(
		requestParameters: HttpPatchAssetRunQueueRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpPatchAssetRunQueue.');
		}
		const queueInput = requestParameters.queueInput;
		if (queueInput === null || queueInput === undefined) {
			throw new Error('Required parameter queueInput was null or undefined when calling httpPatchAssetRunQueue.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.patch<AgravityInfoResponse>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/runqueue/${encodeURIComponent(String(queueInput))}`, null, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint allows the renewal of all assets (start over the trigger of asset type) with or without filtering.
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPatchRenewAllAssets(observe?: 'body', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<AgravityInfoResponse>;
	public httpPatchRenewAllAssets(observe?: 'response', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpResponse<AgravityInfoResponse>>;
	public httpPatchRenewAllAssets(observe?: 'events', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpEvent<AgravityInfoResponse>>;
	public httpPatchRenewAllAssets(observe: any = 'body', reportProgress: boolean = false, options?: { httpHeaderAccept?: 'application/json' }): Observable<any> {
		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.patch<AgravityInfoResponse>(`${this.configuration.basePath}/assetsrenew!!`, null, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}

	/**
	 * This endpoint sets the availability of the asset. All properties are put on the asset and replace previous values.To make an asset unavailable set the &#x60;availability&#x60; property to \&#39;locked\&#39; or set the &#x60;available_from&#x60; property below the current date. To make it available set empty string to &#x60;availability&#x60; property or &#x60;available_to&#x60; property into past.
	 * @param requestParameters
	 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
	 * @param reportProgress flag to report request and response progress.
	 */
	public httpPutAssetAvailability(
		requestParameters: HttpPutAssetAvailabilityRequestParams,
		observe?: 'body',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<AssetAvailability>;
	public httpPutAssetAvailability(
		requestParameters: HttpPutAssetAvailabilityRequestParams,
		observe?: 'response',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpResponse<AssetAvailability>>;
	public httpPutAssetAvailability(
		requestParameters: HttpPutAssetAvailabilityRequestParams,
		observe?: 'events',
		reportProgress?: boolean,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<HttpEvent<AssetAvailability>>;
	public httpPutAssetAvailability(
		requestParameters: HttpPutAssetAvailabilityRequestParams,
		observe: any = 'body',
		reportProgress: boolean = false,
		options?: { httpHeaderAccept?: 'application/json' }
	): Observable<any> {
		const id = requestParameters.id;
		if (id === null || id === undefined) {
			throw new Error('Required parameter id was null or undefined when calling httpPutAssetAvailability.');
		}
		const assetAvailability = requestParameters.assetAvailability;
		if (assetAvailability === null || assetAvailability === undefined) {
			throw new Error('Required parameter assetAvailability was null or undefined when calling httpPutAssetAvailability.');
		}

		let headers = this.defaultHeaders;

		let credential: string | undefined;
		// authentication (msal_auth) required
		credential = this.configuration.lookupCredential('msal_auth');
		if (credential) {
			headers = headers.set('Authorization', 'Bearer ' + credential);
		}

		let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
		if (httpHeaderAcceptSelected === undefined) {
			// to determine the Accept header
			const httpHeaderAccepts: string[] = ['application/json'];
			httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
		}
		if (httpHeaderAcceptSelected !== undefined) {
			headers = headers.set('Accept', httpHeaderAcceptSelected);
		}

		// to determine the Content-Type header
		const consumes: string[] = ['application/json'];
		const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
		if (httpContentTypeSelected !== undefined) {
			headers = headers.set('Content-Type', httpContentTypeSelected);
		}

		let responseType_: 'text' | 'json' = 'json';
		if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
			responseType_ = 'text';
		}

		return this.httpClient.put<AssetAvailability>(`${this.configuration.basePath}/assets/${encodeURIComponent(String(id))}/availability`, assetAvailability, {
			responseType: <any>responseType_,
			withCredentials: this.configuration.withCredentials,
			headers: headers,
			observe: observe,
			reportProgress: reportProgress
		});
	}
}
